---
title: "EDS223-week1"
author: "Stephen Carroll"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---


```{r}
install.packages('sf') # vector data
install.packages('stars') # raster data
install.packages('tmap') # map making
install.packages('here') # file paths
```

```{r}
library(sf)
library(stars)
library(tmap)
library(here)
```

```{r}
# Read in the data and assign variable names

# raster of global elevation
world_elevation <- read_stars(here("data", "worldelevation.tif"))

# country boundaries
world_vector <- read_sf(here("data", "worldvector.gpkg"))

# major cities
world_cities <- read_sf(here("data", "worldcities.gpkg"))
```

```{r}
# plotting vector and raster spatial objects

tm_shape(world_elevation) + #defines the spatial object to plot
  tm_raster() + # defines how the elevatoin is plotted
tm_shape(world_vector) + # defines the spatial object to plot
  tm_borders() + # defines how to plot the object
  tm_shape(world_cities) + # add another data set to overlay on the first object
  tm_dots() # defines how to plot the cities
```

```{r}
# plotting a single spatial object

tm_shape(world_vector) + # defines the spatial object to plot
  tm_polygons() # defines how to plot the object
```


```{r}
# plotting two spatial objects

tm_shape(world_vector) + # defines the FIRST spatial object to plot
  tm_polygons() + # defines how to plot the FIRST object
tm_shape(world_cities) + # defines the SECOND objet to plot
  tm_dots() # defines how to plot the SECOND object
```

```{r}
# 

tm_shape(world_elevation, bbox = c(-15, 35, 45, 65)) + # plot global elevations with specifc area restriction
  tm_raster() + # tm_raster for raster data
tm_shape(world_vector) +
  tm_borders() +
tm_shape(world_cities) +
  tm_dots() +
  tm_text("name")
```

```{r}

tm_shape(world_elevation, bbox = world_cities) + # plot global elevations with specifc area by another layer
  # can also use words like 'Europe' ... look it up
  tm_raster() + # tm_raster for raster data
tm_shape(world_vector) +
  tm_borders() +
tm_shape(world_cities) +
  tm_dots() +
  tm_text("name")
```
# polygons
```{r}
# make an image with `tm_polygons` and customize elements
tm_shape(world_vector) +
  tm_polygons(col = "lightblue",
              border.col = "black",
              lwd = 0.5, # line width
              lty = "dashed") # line type
              
```

```{r}
# create a map with just borders
tm_shape(world_vector) +
  tm_borders(col = "red")
```

```{r}
# create a map with no borders but just fill
tm_shape(world_vector) +
  tm_fill(col = "lightblue")
```


```{r}
# create a map of CO2 emissions
tm_shape(world_vector) +
  tm_fill("CO2_emissions")
```

```{r}
tm_shape(world_cities) +
  tm_squares()
```

```{r}
tm_shape(world_vector) +
  tm_polygons("life_expectancy",
              palette = c("yellow", "darkgreen"),
              title = "Life Expectancy(years)")
```

```{r}
# install apackage that has nice color palettes
install.packages("viridisLite")
library(viridisLite)
```

```{r}
tm_shape(world_vector) +
  tm_polygons("life_expectancy",
              palette = viridis(8),
              title = "Life Expectancy(years)")
```

```{r}
# make a map with points that are based off of a data set
tm_shape(world_vector) +
  tm_polygons() +
  tm_shape(world_cities) +
  tm_symbols(size = "pop2020",
             legend.size.is.portrait = TRUE)
```

```{r}
# add gridlines to your map
tm_shape(world_vector) +
  tm_fill() +
  tm_grid()
```

```{r}
# add curved gridlines to your map
tm_shape(world_vector) +
  tm_fill() +
  tm_graticules()
```

```{r}
# you can put the  map on top of the lines, too
tm_shape(world_vector) +
  tm_graticules() +
  tm_fill() 
  
```

```{r}
tm_shape(world_vector) +
  tm_fill() +
  tm_scale_bar() +
  tm_compass(position = c("left", "top"))
```

```{r}
# make it viewable
tmap_mode("view")

tm_shape(world_vector) +
  tm_fill(col = "wb_income_region",
          palette = viridisLite::plasma(5),
          title = "Regional Income") +
  tm_layout(bg.color = "grey95",
            main.title = "Global income by country",
            frame = FALSE)

tmap_mode("plot")
```

```{r}
# make it static again
tmap_mode("plot")

tm_shape(world_vector) +
  tm_fill(col = "wb_income_region",
          palette = viridisLite::plasma(5),
          title = "Regional Income") +
  tm_layout(bg.color = "grey95",
            main.title = "Global income by country",
            frame = FALSE)

```

```{r}
# save it
tmap_mode("plot")

map1 <- tm_shape(world_vector) +
  tm_fill(col = "wb_income_region",
          palette = viridisLite::plasma(5),
          title = "Regional Income") +
  tm_layout(bg.color = "grey95",
            main.title = "Global income by country",
            frame = FALSE)

tmap_save(map1, here("tmap-example1.png"))
```













